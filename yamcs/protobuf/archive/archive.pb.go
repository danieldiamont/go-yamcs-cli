// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: yamcs/protobuf/archive/archive.proto

package archive

import (
	api "github.com/danieldiamont/go-yamcs-cli/yamcs/api"
	protobuf "github.com/danieldiamont/go-yamcs-cli/yamcs/protobuf"
	pvalue "github.com/danieldiamont/go-yamcs-cli/yamcs/protobuf/pvalue"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Retrieves parameters by performing a replay
type StreamParameterValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string              `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Start    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Stop     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Parameter identifiers. Each identifier takes the form of
	// a namespace and a name.
	//
	// For Yamcs-native naming only the name field is required and
	// should be the fully qualified name. The namespace is only
	// required when the name represents an alias of that parameter.
	Ids []*protobuf.NamedObjectId `protobuf:"bytes,4,rep,name=ids" json:"ids,omitempty"`
	// Since version 5.4.0, Yamcs records the name of the TM link on which
	// a TM packet is received together with the packet (in the tm table).
	// This option, if specified, allows retrieving as part of replay only
	// the packets originally received on one of the links specified.
	TmLinks []string `protobuf:"bytes,5,rep,name=tmLinks" json:"tmLinks,omitempty"`
}

func (x *StreamParameterValuesRequest) Reset() {
	*x = StreamParameterValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamParameterValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamParameterValuesRequest) ProtoMessage() {}

func (x *StreamParameterValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamParameterValuesRequest.ProtoReflect.Descriptor instead.
func (*StreamParameterValuesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{0}
}

func (x *StreamParameterValuesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamParameterValuesRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamParameterValuesRequest) GetStop() *timestamp.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamParameterValuesRequest) GetIds() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *StreamParameterValuesRequest) GetTmLinks() []string {
	if x != nil {
		return x.TmLinks
	}
	return nil
}

type ParameterGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter group names
	//
	// Deprecated: Do not use.
	Group []string `protobuf:"bytes,1,rep,name=group" json:"group,omitempty"`
	// Parameter group names
	Groups []string `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (x *ParameterGroupInfo) Reset() {
	*x = ParameterGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterGroupInfo) ProtoMessage() {}

func (x *ParameterGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterGroupInfo.ProtoReflect.Descriptor instead.
func (*ParameterGroupInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *ParameterGroupInfo) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ParameterGroupInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ListParameterGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
}

func (x *ListParameterGroupsRequest) Reset() {
	*x = ListParameterGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameterGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterGroupsRequest) ProtoMessage() {}

func (x *ListParameterGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListParameterGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{2}
}

func (x *ListParameterGroupsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ListParameterHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“.
	Pos *int64 `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned records per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“.
	Limit *int32 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	// Whether to filter out consecutive identical values. Default “no“.
	Norepeat *bool `protobuf:"varint,5,opt,name=norepeat" json:"norepeat,omitempty"`
	// Filter the lower bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Start *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Stop *timestamp.Timestamp `protobuf:"bytes,7,opt,name=stop" json:"stop,omitempty"`
	// The order of the returned results. Can be either “asc“ or “desc“.
	// Default: “desc“.
	Order *string `protobuf:"bytes,8,opt,name=order" json:"order,omitempty"`
	// Disable loading of parameters from the parameter cache. Default: “false“.
	Norealtime *bool `protobuf:"varint,9,opt,name=norealtime" json:"norealtime,omitempty"`
	// The name of the processor from which to use the parameter cache.
	// Default: “realtime“.
	Processor *string `protobuf:"bytes,10,opt,name=processor" json:"processor,omitempty"`
	// Specifies how to retrieve the parameters. Either “ParameterArchive“ or
	// “replay“. If “replay“ is specified, a replay processor will be created
	// and data will be processed with the active Mission Database. Note that this
	// is much slower than receiving data from the ParameterArchive.
	//
	// Default: “ParameterArchive“.
	Source *string `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	// If set, truncate binary values to the specified byte length.
	// This may be necessary when Yamcs contains large binary values.
	MaxBytes *int32 `protobuf:"varint,13,opt,name=maxBytes" json:"maxBytes,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,12,opt,name=next" json:"next,omitempty"`
}

func (x *ListParameterHistoryRequest) Reset() {
	*x = ListParameterHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameterHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterHistoryRequest) ProtoMessage() {}

func (x *ListParameterHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListParameterHistoryRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{3}
}

func (x *ListParameterHistoryRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListParameterHistoryRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListParameterHistoryRequest) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListParameterHistoryRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListParameterHistoryRequest) GetNorepeat() bool {
	if x != nil && x.Norepeat != nil {
		return *x.Norepeat
	}
	return false
}

func (x *ListParameterHistoryRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListParameterHistoryRequest) GetStop() *timestamp.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListParameterHistoryRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ListParameterHistoryRequest) GetNorealtime() bool {
	if x != nil && x.Norealtime != nil {
		return *x.Norealtime
	}
	return false
}

func (x *ListParameterHistoryRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *ListParameterHistoryRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ListParameterHistoryRequest) GetMaxBytes() int32 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *ListParameterHistoryRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

type ListParameterHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter []*pvalue.ParameterValue `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
}

func (x *ListParameterHistoryResponse) Reset() {
	*x = ListParameterHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameterHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterHistoryResponse) ProtoMessage() {}

func (x *ListParameterHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListParameterHistoryResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{4}
}

func (x *ListParameterHistoryResponse) GetParameter() []*pvalue.ParameterValue {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ListParameterHistoryResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type GetParameterSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Filter the lower bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Start *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Stop *timestamp.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	// Number of intervals to use. Default: “500“.
	Count *int32 `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	// Disable loading of parameters from the parameter cache. Default: “false“.
	Norealtime *bool `protobuf:"varint,6,opt,name=norealtime" json:"norealtime,omitempty"`
	// Consider the raw value instead of the engineering value.
	// Default is to use the engineering value
	UseRawValue *bool `protobuf:"varint,9,opt,name=useRawValue" json:"useRawValue,omitempty"`
	// The name of the processor from which to use the parameter cache.
	// Default: “realtime“.
	Processor *string `protobuf:"bytes,7,opt,name=processor" json:"processor,omitempty"`
	// Specifies how to retrieve the parameters. Either “ParameterArchive“ or
	// “replay“. If “replay“ is specified, a replay processor will be created
	// and data will be processed with the active Mission Database. Note that
	// this is much slower than receiving data from the ParameterArchive.
	//
	// Default: “ParameterArchive“.
	Source *string `protobuf:"bytes,8,opt,name=source" json:"source,omitempty"`
}

func (x *GetParameterSamplesRequest) Reset() {
	*x = GetParameterSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParameterSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterSamplesRequest) ProtoMessage() {}

func (x *GetParameterSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterSamplesRequest.ProtoReflect.Descriptor instead.
func (*GetParameterSamplesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{5}
}

func (x *GetParameterSamplesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterSamplesRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetParameterSamplesRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetParameterSamplesRequest) GetStop() *timestamp.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *GetParameterSamplesRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GetParameterSamplesRequest) GetNorealtime() bool {
	if x != nil && x.Norealtime != nil {
		return *x.Norealtime
	}
	return false
}

func (x *GetParameterSamplesRequest) GetUseRawValue() bool {
	if x != nil && x.UseRawValue != nil {
		return *x.UseRawValue
	}
	return false
}

func (x *GetParameterSamplesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetParameterSamplesRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

type ExportParameterValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Filter the lower bound of the parameter's generation time.
	// Specify a date string in ISO 8601 format.
	Start *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the parameter's generation time.
	// Specify a date string in ISO 8601 format.
	Stop *timestamp.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// The parameters to add to the export.
	Parameters []string `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
	// Namespace used to display parameter names in csv header.
	// Only used when no parameter ids were specified.
	Namespace *string `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	// Extra columns added to the CSV output:
	//
	//   - “raw“: Raw parameter values
	//   - “monitoring“: Monitoring status
	Extra []string `protobuf:"bytes,6,rep,name=extra" json:"extra,omitempty"`
	// Column delimiter. One of “TAB“, “COMMA“ or “SEMICOLON“.
	// Default: “TAB“.
	Delimiter *string `protobuf:"bytes,7,opt,name=delimiter" json:"delimiter,omitempty"`
	// When specified, only one value each for each interval is returned.
	// The value is in milliseconds.
	Interval *int32 `protobuf:"varint,8,opt,name=interval" json:"interval,omitempty"`
}

func (x *ExportParameterValuesRequest) Reset() {
	*x = ExportParameterValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportParameterValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportParameterValuesRequest) ProtoMessage() {}

func (x *ExportParameterValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_archive_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportParameterValuesRequest.ProtoReflect.Descriptor instead.
func (*ExportParameterValuesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_archive_proto_rawDescGZIP(), []int{6}
}

func (x *ExportParameterValuesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExportParameterValuesRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ExportParameterValuesRequest) GetStop() *timestamp.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ExportParameterValuesRequest) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExportParameterValuesRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ExportParameterValuesRequest) GetExtra() []string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ExportParameterValuesRequest) GetDelimiter() string {
	if x != nil && x.Delimiter != nil {
		return *x.Delimiter
	}
	return ""
}

func (x *ExportParameterValuesRequest) GetInterval() int32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

var File_yamcs_protobuf_archive_archive_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_archive_archive_proto_rawDesc = []byte{
	0x0a, 0x24, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x70, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6d, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x22, 0x46, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x38, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x32, 0x82, 0x07, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x70, 0x69, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2e, 0x8a, 0x92, 0x03, 0x2a, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x8a, 0x92, 0x03, 0x33, 0x0a, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12, 0xb4,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x8a, 0x92, 0x03, 0x39, 0x1a, 0x34, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0xb5, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x47, 0x8a, 0x92, 0x03, 0x43, 0x0a, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x99, 0x01,
	0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x33, 0x8a, 0x92, 0x03, 0x2f, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x30, 0x01, 0x42, 0x52, 0x0a, 0x12, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6e, 0x69,
	0x65, 0x6c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
}

var (
	file_yamcs_protobuf_archive_archive_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_archive_archive_proto_rawDescData = file_yamcs_protobuf_archive_archive_proto_rawDesc
)

func file_yamcs_protobuf_archive_archive_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_archive_archive_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_archive_archive_proto_rawDescData = protoimpl.X.CompressGZIP(file_yamcs_protobuf_archive_archive_proto_rawDescData)
	})
	return file_yamcs_protobuf_archive_archive_proto_rawDescData
}

var file_yamcs_protobuf_archive_archive_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yamcs_protobuf_archive_archive_proto_goTypes = []interface{}{
	(*StreamParameterValuesRequest)(nil), // 0: yamcs.protobuf.archive.StreamParameterValuesRequest
	(*ParameterGroupInfo)(nil),           // 1: yamcs.protobuf.archive.ParameterGroupInfo
	(*ListParameterGroupsRequest)(nil),   // 2: yamcs.protobuf.archive.ListParameterGroupsRequest
	(*ListParameterHistoryRequest)(nil),  // 3: yamcs.protobuf.archive.ListParameterHistoryRequest
	(*ListParameterHistoryResponse)(nil), // 4: yamcs.protobuf.archive.ListParameterHistoryResponse
	(*GetParameterSamplesRequest)(nil),   // 5: yamcs.protobuf.archive.GetParameterSamplesRequest
	(*ExportParameterValuesRequest)(nil), // 6: yamcs.protobuf.archive.ExportParameterValuesRequest
	(*timestamp.Timestamp)(nil),          // 7: google.protobuf.Timestamp
	(*protobuf.NamedObjectId)(nil),       // 8: yamcs.protobuf.NamedObjectId
	(*pvalue.ParameterValue)(nil),        // 9: yamcs.protobuf.pvalue.ParameterValue
	(*pvalue.ParameterData)(nil),         // 10: yamcs.protobuf.pvalue.ParameterData
	(*pvalue.TimeSeries)(nil),            // 11: yamcs.protobuf.pvalue.TimeSeries
	(*api.HttpBody)(nil),                 // 12: yamcs.api.HttpBody
}
var file_yamcs_protobuf_archive_archive_proto_depIdxs = []int32{
	7,  // 0: yamcs.protobuf.archive.StreamParameterValuesRequest.start:type_name -> google.protobuf.Timestamp
	7,  // 1: yamcs.protobuf.archive.StreamParameterValuesRequest.stop:type_name -> google.protobuf.Timestamp
	8,  // 2: yamcs.protobuf.archive.StreamParameterValuesRequest.ids:type_name -> yamcs.protobuf.NamedObjectId
	7,  // 3: yamcs.protobuf.archive.ListParameterHistoryRequest.start:type_name -> google.protobuf.Timestamp
	7,  // 4: yamcs.protobuf.archive.ListParameterHistoryRequest.stop:type_name -> google.protobuf.Timestamp
	9,  // 5: yamcs.protobuf.archive.ListParameterHistoryResponse.parameter:type_name -> yamcs.protobuf.pvalue.ParameterValue
	7,  // 6: yamcs.protobuf.archive.GetParameterSamplesRequest.start:type_name -> google.protobuf.Timestamp
	7,  // 7: yamcs.protobuf.archive.GetParameterSamplesRequest.stop:type_name -> google.protobuf.Timestamp
	7,  // 8: yamcs.protobuf.archive.ExportParameterValuesRequest.start:type_name -> google.protobuf.Timestamp
	7,  // 9: yamcs.protobuf.archive.ExportParameterValuesRequest.stop:type_name -> google.protobuf.Timestamp
	2,  // 10: yamcs.protobuf.archive.StreamArchiveApi.ListParameterGroups:input_type -> yamcs.protobuf.archive.ListParameterGroupsRequest
	3,  // 11: yamcs.protobuf.archive.StreamArchiveApi.ListParameterHistory:input_type -> yamcs.protobuf.archive.ListParameterHistoryRequest
	0,  // 12: yamcs.protobuf.archive.StreamArchiveApi.StreamParameterValues:input_type -> yamcs.protobuf.archive.StreamParameterValuesRequest
	5,  // 13: yamcs.protobuf.archive.StreamArchiveApi.GetParameterSamples:input_type -> yamcs.protobuf.archive.GetParameterSamplesRequest
	6,  // 14: yamcs.protobuf.archive.StreamArchiveApi.ExportParameterValues:input_type -> yamcs.protobuf.archive.ExportParameterValuesRequest
	1,  // 15: yamcs.protobuf.archive.StreamArchiveApi.ListParameterGroups:output_type -> yamcs.protobuf.archive.ParameterGroupInfo
	4,  // 16: yamcs.protobuf.archive.StreamArchiveApi.ListParameterHistory:output_type -> yamcs.protobuf.archive.ListParameterHistoryResponse
	10, // 17: yamcs.protobuf.archive.StreamArchiveApi.StreamParameterValues:output_type -> yamcs.protobuf.pvalue.ParameterData
	11, // 18: yamcs.protobuf.archive.StreamArchiveApi.GetParameterSamples:output_type -> yamcs.protobuf.pvalue.TimeSeries
	12, // 19: yamcs.protobuf.archive.StreamArchiveApi.ExportParameterValues:output_type -> yamcs.api.HttpBody
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_archive_archive_proto_init() }
func file_yamcs_protobuf_archive_archive_proto_init() {
	if File_yamcs_protobuf_archive_archive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yamcs_protobuf_archive_archive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamParameterValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameterGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameterHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameterHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParameterSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_archive_archive_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportParameterValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yamcs_protobuf_archive_archive_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_archive_archive_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_archive_archive_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_archive_archive_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_archive_archive_proto = out.File
	file_yamcs_protobuf_archive_archive_proto_rawDesc = nil
	file_yamcs_protobuf_archive_archive_proto_goTypes = nil
	file_yamcs_protobuf_archive_archive_proto_depIdxs = nil
}
