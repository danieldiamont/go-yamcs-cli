// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: yamcs/protobuf/processing/processing.proto

package processing

import (
	_ "github.com/danieldiamont/go-yamcs-cli/yamcs/api"
	protobuf "github.com/danieldiamont/go-yamcs-cli/yamcs/protobuf"
	pvalue "github.com/danieldiamont/go-yamcs-cli/yamcs/protobuf/pvalue"
	yamcsManagement "github.com/danieldiamont/go-yamcs-cli/yamcs/protobuf/yamcsManagement"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies what Yamcs should do with the parameter identifiers
// that are specifiedwith the “id“ field.
type SubscribeParametersRequest_Action int32

const (
	// The parameter identifiers specified with “id“, replace any that were
	// previously subscribed to on this call.
	SubscribeParametersRequest_REPLACE SubscribeParametersRequest_Action = 0
	// The parameter identifiers specified with “id“ are added to any
	// that were previously subscribed to on this call.
	SubscribeParametersRequest_ADD SubscribeParametersRequest_Action = 1
	// The parameter identifiers specified with “id“ are removed from those
	// that were previously subscribed to on this call.
	SubscribeParametersRequest_REMOVE SubscribeParametersRequest_Action = 2
)

// Enum value maps for SubscribeParametersRequest_Action.
var (
	SubscribeParametersRequest_Action_name = map[int32]string{
		0: "REPLACE",
		1: "ADD",
		2: "REMOVE",
	}
	SubscribeParametersRequest_Action_value = map[string]int32{
		"REPLACE": 0,
		"ADD":     1,
		"REMOVE":  2,
	}
)

func (x SubscribeParametersRequest_Action) Enum() *SubscribeParametersRequest_Action {
	p := new(SubscribeParametersRequest_Action)
	*p = x
	return p
}

func (x SubscribeParametersRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeParametersRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_processing_processing_proto_enumTypes[0].Descriptor()
}

func (SubscribeParametersRequest_Action) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_processing_processing_proto_enumTypes[0]
}

func (x SubscribeParametersRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SubscribeParametersRequest_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SubscribeParametersRequest_Action(num)
	return nil
}

// Deprecated: Use SubscribeParametersRequest_Action.Descriptor instead.
func (SubscribeParametersRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{5, 0}
}

// Response message for `ListProcessorTypes`
type ListProcessorTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []string `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (x *ListProcessorTypesResponse) Reset() {
	*x = ListProcessorTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessorTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessorTypesResponse) ProtoMessage() {}

func (x *ListProcessorTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessorTypesResponse.ProtoReflect.Descriptor instead.
func (*ListProcessorTypesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{0}
}

func (x *ListProcessorTypesResponse) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

// Request message for `ListProcessors`.
type ListProcessorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return only processors of this instance
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
}

func (x *ListProcessorsRequest) Reset() {
	*x = ListProcessorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessorsRequest) ProtoMessage() {}

func (x *ListProcessorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessorsRequest.ProtoReflect.Descriptor instead.
func (*ListProcessorsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{1}
}

func (x *ListProcessorsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

// Response message for `ListProcessors`.
type ListProcessorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processors []*yamcsManagement.ProcessorInfo `protobuf:"bytes,1,rep,name=processors" json:"processors,omitempty"`
}

func (x *ListProcessorsResponse) Reset() {
	*x = ListProcessorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessorsResponse) ProtoMessage() {}

func (x *ListProcessorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessorsResponse.ProtoReflect.Descriptor instead.
func (*ListProcessorsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{2}
}

func (x *ListProcessorsResponse) GetProcessors() []*yamcsManagement.ProcessorInfo {
	if x != nil {
		return x.Processors
	}
	return nil
}

// Request message for `SubscribeTMStatistics`.
type SubscribeTMStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
}

func (x *SubscribeTMStatisticsRequest) Reset() {
	*x = SubscribeTMStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTMStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTMStatisticsRequest) ProtoMessage() {}

func (x *SubscribeTMStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTMStatisticsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTMStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeTMStatisticsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeTMStatisticsRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

// Request message for `SubscribeProcessors`.
type SubscribeProcessorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
}

func (x *SubscribeProcessorsRequest) Reset() {
	*x = SubscribeProcessorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeProcessorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeProcessorsRequest) ProtoMessage() {}

func (x *SubscribeProcessorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeProcessorsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeProcessorsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeProcessorsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeProcessorsRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

// Request message for `SubscribeParameters`.
type SubscribeParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Parameter identifiers. Each identifier takes the form of
	// a namespace and a name.
	//
	// For Yamcs-native naming only the name field is required and
	// should be the fully qualified name. The namespace is only
	// required when the name represents an alias of that parameter.
	Id []*protobuf.NamedObjectId `protobuf:"bytes,3,rep,name=id" json:"id,omitempty"`
	// Send an error message if any parameter is invalid.
	// Default: true
	AbortOnInvalid *bool `protobuf:"varint,4,opt,name=abortOnInvalid" json:"abortOnInvalid,omitempty"`
	// Send parameter updates when parameters expire.
	// The update will have the same value and timestamp like
	// the preceding update, but with acquisition status set to
	// EXPIRED (instead of ACQUIRED)
	// Default: false
	UpdateOnExpiration *bool `protobuf:"varint,5,opt,name=updateOnExpiration" json:"updateOnExpiration,omitempty"`
	// If available, send immediately the last cached value
	// of each subscribed parameter.
	// Default: true
	SendFromCache *bool `protobuf:"varint,6,opt,name=sendFromCache" json:"sendFromCache,omitempty"`
	// How to interpret the submitted parameter ids. Default
	// is to replace an existing subscription with the newly
	// submitted list.
	Action *SubscribeParametersRequest_Action `protobuf:"varint,7,opt,name=action,enum=yamcs.protobuf.processing.SubscribeParametersRequest_Action" json:"action,omitempty"`
	// If set, truncate binary values to the specified byte length.
	// This may be necessary when Yamcs contains large binary values.
	//
	// A negative value implies no truncating, which is the default.
	MaxBytes *int32 `protobuf:"varint,8,opt,name=maxBytes" json:"maxBytes,omitempty"`
}

func (x *SubscribeParametersRequest) Reset() {
	*x = SubscribeParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeParametersRequest) ProtoMessage() {}

func (x *SubscribeParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeParametersRequest.ProtoReflect.Descriptor instead.
func (*SubscribeParametersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeParametersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeParametersRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *SubscribeParametersRequest) GetId() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscribeParametersRequest) GetAbortOnInvalid() bool {
	if x != nil && x.AbortOnInvalid != nil {
		return *x.AbortOnInvalid
	}
	return false
}

func (x *SubscribeParametersRequest) GetUpdateOnExpiration() bool {
	if x != nil && x.UpdateOnExpiration != nil {
		return *x.UpdateOnExpiration
	}
	return false
}

func (x *SubscribeParametersRequest) GetSendFromCache() bool {
	if x != nil && x.SendFromCache != nil {
		return *x.SendFromCache
	}
	return false
}

func (x *SubscribeParametersRequest) GetAction() SubscribeParametersRequest_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return SubscribeParametersRequest_REPLACE
}

func (x *SubscribeParametersRequest) GetMaxBytes() int32 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

type SubscribeParametersData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping between numeric and subscribed identifier.
	Mapping map[uint32]*protobuf.NamedObjectId `protobuf:"bytes,1,rep,name=mapping" json:"mapping,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Parameter identifiers that were subscribed to, but that
	// cannot be matched against the Mission Database.
	Invalid []*protobuf.NamedObjectId `protobuf:"bytes,2,rep,name=invalid" json:"invalid,omitempty"`
	// Values of updated parameters.
	Values []*pvalue.ParameterValue `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (x *SubscribeParametersData) Reset() {
	*x = SubscribeParametersData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeParametersData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeParametersData) ProtoMessage() {}

func (x *SubscribeParametersData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeParametersData.ProtoReflect.Descriptor instead.
func (*SubscribeParametersData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeParametersData) GetMapping() map[uint32]*protobuf.NamedObjectId {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *SubscribeParametersData) GetInvalid() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Invalid
	}
	return nil
}

func (x *SubscribeParametersData) GetValues() []*pvalue.ParameterValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Request message for `GetProcessor`.
type GetProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
}

func (x *GetProcessorRequest) Reset() {
	*x = GetProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessorRequest) ProtoMessage() {}

func (x *GetProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessorRequest.ProtoReflect.Descriptor instead.
func (*GetProcessorRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{7}
}

func (x *GetProcessorRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetProcessorRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

// Request message for `DeleteProcessor`.
type DeleteProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
}

func (x *DeleteProcessorRequest) Reset() {
	*x = DeleteProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessorRequest) ProtoMessage() {}

func (x *DeleteProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessorRequest.ProtoReflect.Descriptor instead.
func (*DeleteProcessorRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteProcessorRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *DeleteProcessorRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

// Request message for `CreateProcessor`.
type CreateProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// **Required.** The name of the Yamcs instance.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// **Required.** The name of the processor. Must be unique for the Yamcs instance.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Keep the processor when terminated. Default: “no“.
	Persistent *bool `protobuf:"varint,4,opt,name=persistent" json:"persistent,omitempty"`
	// **Required.** The type of the processor. The available values depend on how
	// Yamcs Server is configured. Most Yamcs deployments support at least a type
	// “Archive“ which allows for the creation of processors replaying archived
	// data.
	Type *string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// Configuration options specific to the processor type. Note that this should
	// be a string representation of a valid JSON structure.
	Config *string `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
}

func (x *CreateProcessorRequest) Reset() {
	*x = CreateProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessorRequest) ProtoMessage() {}

func (x *CreateProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessorRequest.ProtoReflect.Descriptor instead.
func (*CreateProcessorRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{9}
}

func (x *CreateProcessorRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CreateProcessorRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateProcessorRequest) GetPersistent() bool {
	if x != nil && x.Persistent != nil {
		return *x.Persistent
	}
	return false
}

func (x *CreateProcessorRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CreateProcessorRequest) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

// Request message for `EditProcessor`.
type EditProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// The state this replay processor should be updated to. Either “paused“ or
	// “running“.
	State *string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// The time where the processing needs to jump towards. Must be a date string
	// in ISO 8601 format.
	Seek *timestamp.Timestamp `protobuf:"bytes,4,opt,name=seek" json:"seek,omitempty"`
	// The speed of the processor. One of:
	// * “afap“
	// * a speed factor relative to the original speed. Example: “2x“
	// * a fixed delay value in milliseconds. Example: “2000“
	Speed *string `protobuf:"bytes,5,opt,name=speed" json:"speed,omitempty"`
	// New start time
	Start *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	// New stop time
	Stop *timestamp.Timestamp `protobuf:"bytes,7,opt,name=stop" json:"stop,omitempty"`
	// Continue replaying from “start“ after having reached “stop“.
	Loop *bool `protobuf:"varint,8,opt,name=loop" json:"loop,omitempty"`
}

func (x *EditProcessorRequest) Reset() {
	*x = EditProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditProcessorRequest) ProtoMessage() {}

func (x *EditProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditProcessorRequest.ProtoReflect.Descriptor instead.
func (*EditProcessorRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{10}
}

func (x *EditProcessorRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *EditProcessorRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *EditProcessorRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *EditProcessorRequest) GetSeek() *timestamp.Timestamp {
	if x != nil {
		return x.Seek
	}
	return nil
}

func (x *EditProcessorRequest) GetSpeed() string {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return ""
}

func (x *EditProcessorRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *EditProcessorRequest) GetStop() *timestamp.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *EditProcessorRequest) GetLoop() bool {
	if x != nil && x.Loop != nil {
		return *x.Loop
	}
	return false
}

// Request message for `GetParameterValue`.
type GetParameterValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Whether the latest cached value may be returned. Default: “yes“.
	FromCache *bool `protobuf:"varint,4,opt,name=fromCache" json:"fromCache,omitempty"`
	// Time in milliseconds to wait on a value (only considered if
	// “fromCache=no“). When the timeout is met, the call will return
	// with no or partial data. Default: “10000“.
	Timeout *uint64 `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
}

func (x *GetParameterValueRequest) Reset() {
	*x = GetParameterValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParameterValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterValueRequest) ProtoMessage() {}

func (x *GetParameterValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterValueRequest.ProtoReflect.Descriptor instead.
func (*GetParameterValueRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{11}
}

func (x *GetParameterValueRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterValueRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetParameterValueRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetParameterValueRequest) GetFromCache() bool {
	if x != nil && x.FromCache != nil {
		return *x.FromCache
	}
	return false
}

func (x *GetParameterValueRequest) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

// Request message for `SetParameterValue`.
type SetParameterValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The new value.
	Value *protobuf.Value `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	// The generation time of the value. If specified, must be a date
	// string in ISO 8601 format.
	GenerationTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=generationTime" json:"generationTime,omitempty"`
	// How long before this value is expired, in milliseconds
	ExpiresIn *uint64 `protobuf:"varint,6,opt,name=expiresIn" json:"expiresIn,omitempty"`
}

func (x *SetParameterValueRequest) Reset() {
	*x = SetParameterValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetParameterValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterValueRequest) ProtoMessage() {}

func (x *SetParameterValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterValueRequest.ProtoReflect.Descriptor instead.
func (*SetParameterValueRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{12}
}

func (x *SetParameterValueRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SetParameterValueRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *SetParameterValueRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SetParameterValueRequest) GetValue() *protobuf.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SetParameterValueRequest) GetGenerationTime() *timestamp.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *SetParameterValueRequest) GetExpiresIn() uint64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

// Request message for `BatchGetParameterValues`.
type BatchGetParameterValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,4,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,5,opt,name=processor" json:"processor,omitempty"`
	// Parameter identifiers. Each identifier takes the form of
	// a namespace and a name.
	//
	// For Yamcs-native naming only the name field is required and
	// should be the fully qualified name. The namespace is only
	// required when the name represents an alias of that parameter.
	Id        []*protobuf.NamedObjectId `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	FromCache *bool                     `protobuf:"varint,2,opt,name=fromCache" json:"fromCache,omitempty"`
	// If not fromCache, wait this time (in milliseconds) to receive the parameter
	Timeout *uint64 `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
}

func (x *BatchGetParameterValuesRequest) Reset() {
	*x = BatchGetParameterValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetParameterValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetParameterValuesRequest) ProtoMessage() {}

func (x *BatchGetParameterValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetParameterValuesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetParameterValuesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{13}
}

func (x *BatchGetParameterValuesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *BatchGetParameterValuesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *BatchGetParameterValuesRequest) GetId() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchGetParameterValuesRequest) GetFromCache() bool {
	if x != nil && x.FromCache != nil {
		return *x.FromCache
	}
	return false
}

func (x *BatchGetParameterValuesRequest) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

// Response message for `BatchGetParameterValues`.
type BatchGetParameterValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*pvalue.ParameterValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (x *BatchGetParameterValuesResponse) Reset() {
	*x = BatchGetParameterValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetParameterValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetParameterValuesResponse) ProtoMessage() {}

func (x *BatchGetParameterValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetParameterValuesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetParameterValuesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{14}
}

func (x *BatchGetParameterValuesResponse) GetValue() []*pvalue.ParameterValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Request message for `BatchSetParameterValues`.
type BatchSetParameterValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,3,opt,name=processor" json:"processor,omitempty"`
	// Requests, one for each new value
	Request []*BatchSetParameterValuesRequest_SetParameterValueRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (x *BatchSetParameterValuesRequest) Reset() {
	*x = BatchSetParameterValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetParameterValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetParameterValuesRequest) ProtoMessage() {}

func (x *BatchSetParameterValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetParameterValuesRequest.ProtoReflect.Descriptor instead.
func (*BatchSetParameterValuesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{15}
}

func (x *BatchSetParameterValuesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *BatchSetParameterValuesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *BatchSetParameterValuesRequest) GetRequest() []*BatchSetParameterValuesRequest_SetParameterValueRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Request message for `GetAlgorithmStatus`.
type GetAlgorithmStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *GetAlgorithmStatusRequest) Reset() {
	*x = GetAlgorithmStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlgorithmStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmStatusRequest) ProtoMessage() {}

func (x *GetAlgorithmStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmStatusRequest.ProtoReflect.Descriptor instead.
func (*GetAlgorithmStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{16}
}

func (x *GetAlgorithmStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetAlgorithmStatusRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetAlgorithmStatusRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Request message for `SubscribeAlgorithmStatus`.
type SubscribeAlgorithmStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *SubscribeAlgorithmStatusRequest) Reset() {
	*x = SubscribeAlgorithmStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeAlgorithmStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAlgorithmStatusRequest) ProtoMessage() {}

func (x *SubscribeAlgorithmStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAlgorithmStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAlgorithmStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{17}
}

func (x *SubscribeAlgorithmStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeAlgorithmStatusRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *SubscribeAlgorithmStatusRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Request message for `GetAlgorithmTrace`.
type GetAlgorithmTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *GetAlgorithmTraceRequest) Reset() {
	*x = GetAlgorithmTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlgorithmTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmTraceRequest) ProtoMessage() {}

func (x *GetAlgorithmTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmTraceRequest.ProtoReflect.Descriptor instead.
func (*GetAlgorithmTraceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{18}
}

func (x *GetAlgorithmTraceRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetAlgorithmTraceRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetAlgorithmTraceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Request message for `EditAlgorithmTrace`.
type EditAlgorithmTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Trace state: either “enabled“ or “disabled“.
	State *string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

func (x *EditAlgorithmTraceRequest) Reset() {
	*x = EditAlgorithmTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAlgorithmTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAlgorithmTraceRequest) ProtoMessage() {}

func (x *EditAlgorithmTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAlgorithmTraceRequest.ProtoReflect.Descriptor instead.
func (*EditAlgorithmTraceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{19}
}

func (x *EditAlgorithmTraceRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *EditAlgorithmTraceRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *EditAlgorithmTraceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EditAlgorithmTraceRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type AlgorithmStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true if the algorithm is active
	Active *bool `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	// true if the tracing has been enabled
	TraceEnabled *bool `protobuf:"varint,2,opt,name=traceEnabled" json:"traceEnabled,omitempty"`
	// how many times the algorithm ran (successfully or with error)
	RunCount *uint32 `protobuf:"varint,3,opt,name=runCount" json:"runCount,omitempty"`
	// when the algorithm was last run
	LastRun *timestamp.Timestamp `protobuf:"bytes,4,opt,name=lastRun" json:"lastRun,omitempty"`
	// how many times the algorithm ran with errors
	ErrorCount *uint32 `protobuf:"varint,5,opt,name=errorCount" json:"errorCount,omitempty"`
	// if the algorithm produced an error,
	// the fields below contain the error message and the time when the error was raised
	ErrorMessage *string              `protobuf:"bytes,6,opt,name=errorMessage" json:"errorMessage,omitempty"`
	ErrorTime    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=errorTime" json:"errorTime,omitempty"`
	// total execution time in nanoseconds
	ExecTimeNs *uint64 `protobuf:"varint,8,opt,name=execTimeNs" json:"execTimeNs,omitempty"`
}

func (x *AlgorithmStatus) Reset() {
	*x = AlgorithmStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmStatus) ProtoMessage() {}

func (x *AlgorithmStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmStatus.ProtoReflect.Descriptor instead.
func (*AlgorithmStatus) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{20}
}

func (x *AlgorithmStatus) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *AlgorithmStatus) GetTraceEnabled() bool {
	if x != nil && x.TraceEnabled != nil {
		return *x.TraceEnabled
	}
	return false
}

func (x *AlgorithmStatus) GetRunCount() uint32 {
	if x != nil && x.RunCount != nil {
		return *x.RunCount
	}
	return 0
}

func (x *AlgorithmStatus) GetLastRun() *timestamp.Timestamp {
	if x != nil {
		return x.LastRun
	}
	return nil
}

func (x *AlgorithmStatus) GetErrorCount() uint32 {
	if x != nil && x.ErrorCount != nil {
		return *x.ErrorCount
	}
	return 0
}

func (x *AlgorithmStatus) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *AlgorithmStatus) GetErrorTime() *timestamp.Timestamp {
	if x != nil {
		return x.ErrorTime
	}
	return nil
}

func (x *AlgorithmStatus) GetExecTimeNs() uint64 {
	if x != nil && x.ExecTimeNs != nil {
		return *x.ExecTimeNs
	}
	return 0
}

type AlgorithmTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latest algorithm runs
	Runs []*AlgorithmTrace_Run `protobuf:"bytes,1,rep,name=runs" json:"runs,omitempty"`
	// Latest log entries
	Logs []*AlgorithmTrace_Log `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
}

func (x *AlgorithmTrace) Reset() {
	*x = AlgorithmTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmTrace) ProtoMessage() {}

func (x *AlgorithmTrace) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmTrace.ProtoReflect.Descriptor instead.
func (*AlgorithmTrace) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{21}
}

func (x *AlgorithmTrace) GetRuns() []*AlgorithmTrace_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *AlgorithmTrace) GetLogs() []*AlgorithmTrace_Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type BatchSetParameterValuesRequest_SetParameterValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter identifier. This takes the form of a namespace and
	// a name.
	//
	// For Yamcs-native naming only the name field is required and
	// should be the fully qualified name. The namespace is only
	// required when the name represents an alias of that parameter.
	Id *protobuf.NamedObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The new value
	Value *protobuf.Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// The generation time of the value. If specified, must be a date
	// string in ISO 8601 format.
	GenerationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=generationTime" json:"generationTime,omitempty"`
	// How long before this value is expired, in milliseconds
	ExpiresIn *uint64 `protobuf:"varint,4,opt,name=expiresIn" json:"expiresIn,omitempty"`
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) Reset() {
	*x = BatchSetParameterValuesRequest_SetParameterValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetParameterValuesRequest_SetParameterValueRequest) ProtoMessage() {}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetParameterValuesRequest_SetParameterValueRequest.ProtoReflect.Descriptor instead.
func (*BatchSetParameterValuesRequest_SetParameterValueRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) GetId() *protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) GetValue() *protobuf.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) GetGenerationTime() *timestamp.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *BatchSetParameterValuesRequest_SetParameterValueRequest) GetExpiresIn() uint64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

// A single execution of an algorithm
type AlgorithmTrace_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When this run was started
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	// Values of input parameters for this run
	Inputs []*pvalue.ParameterValue `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	// Values of output parameters for this run
	Outputs []*pvalue.ParameterValue `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	// The return value, if the algorithm returned something.
	// This can be useful in the context of verifiers.
	ReturnValue *string `protobuf:"bytes,4,opt,name=returnValue" json:"returnValue,omitempty"`
	// Error message, if any
	Error *string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (x *AlgorithmTrace_Run) Reset() {
	*x = AlgorithmTrace_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmTrace_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmTrace_Run) ProtoMessage() {}

func (x *AlgorithmTrace_Run) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmTrace_Run.ProtoReflect.Descriptor instead.
func (*AlgorithmTrace_Run) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{21, 0}
}

func (x *AlgorithmTrace_Run) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AlgorithmTrace_Run) GetInputs() []*pvalue.ParameterValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *AlgorithmTrace_Run) GetOutputs() []*pvalue.ParameterValue {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *AlgorithmTrace_Run) GetReturnValue() string {
	if x != nil && x.ReturnValue != nil {
		return *x.ReturnValue
	}
	return ""
}

func (x *AlgorithmTrace_Run) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// A log message that was emitted by the algorithm
// using the `Yamcs.log` function.
type AlgorithmTrace_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log time
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// Logged message
	Msg *string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (x *AlgorithmTrace_Log) Reset() {
	*x = AlgorithmTrace_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmTrace_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmTrace_Log) ProtoMessage() {}

func (x *AlgorithmTrace_Log) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_processing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmTrace_Log.ProtoReflect.Descriptor instead.
func (*AlgorithmTrace_Log) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_processing_proto_rawDescGZIP(), []int{21, 1}
}

func (x *AlgorithmTrace_Log) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AlgorithmTrace_Log) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

var File_yamcs_protobuf_processing_processing_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_processing_processing_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x67, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x1c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0xa1, 0x03, 0x0a,
	0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02,
	0x22, 0xc7, 0x02, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x3d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x59, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22,
	0x94, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa2, 0x02, 0x0a, 0x14, 0x45, 0x64, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x22, 0xa0, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xf7,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5e, 0x0a, 0x1f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x03, 0x0a,
	0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xd8, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x22, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a,
	0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x19, 0x45, 0x64, 0x69, 0x74,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x22, 0xcf, 0x03, 0x0a, 0x0e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x47, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x85, 0x16, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x12, 0x7f, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x35, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x8a, 0x92, 0x03, 0x16, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x8c,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x8a, 0x92, 0x03, 0x11, 0x0a, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2e,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x8a,
	0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28,
	0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2f, 0x8a, 0x92, 0x03, 0x2b, 0x2a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x18, 0x8a, 0x92, 0x03, 0x14, 0x1a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f,
	0x8a, 0x92, 0x03, 0x3b, 0x0a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12,
	0xee, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8b, 0x01, 0x8a, 0x92, 0x03, 0x86, 0x01, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x3a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5a, 0x42, 0x1a, 0x39,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x3a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xd5, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x8a, 0x92, 0x03, 0x3f, 0x1a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x8a, 0x92, 0x03, 0x3f, 0x1a, 0x3a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x37, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x0d, 0xda, 0x92, 0x03,
	0x09, 0x0a, 0x07, 0x74, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0x96, 0x01, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x10, 0xda, 0x92, 0x03, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x10, 0xda, 0x92, 0x03, 0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x30, 0x01, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x46, 0x8a, 0x92, 0x03, 0x42, 0x0a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x16, 0xda,
	0x92, 0x03, 0x12, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x33, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x45, 0x8a,
	0x92, 0x03, 0x41, 0x0a, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x8a, 0x92, 0x03, 0x44, 0x2a,
	0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x3a, 0x01, 0x2a, 0x42, 0x68, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6e, 0x69, 0x65, 0x6c, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d,
	0x63, 0x6c, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
}

var (
	file_yamcs_protobuf_processing_processing_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_processing_processing_proto_rawDescData = file_yamcs_protobuf_processing_processing_proto_rawDesc
)

func file_yamcs_protobuf_processing_processing_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_processing_processing_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_processing_processing_proto_rawDescData = protoimpl.X.CompressGZIP(file_yamcs_protobuf_processing_processing_proto_rawDescData)
	})
	return file_yamcs_protobuf_processing_processing_proto_rawDescData
}

var file_yamcs_protobuf_processing_processing_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yamcs_protobuf_processing_processing_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_yamcs_protobuf_processing_processing_proto_goTypes = []interface{}{
	(SubscribeParametersRequest_Action)(0),                          // 0: yamcs.protobuf.processing.SubscribeParametersRequest.Action
	(*ListProcessorTypesResponse)(nil),                              // 1: yamcs.protobuf.processing.ListProcessorTypesResponse
	(*ListProcessorsRequest)(nil),                                   // 2: yamcs.protobuf.processing.ListProcessorsRequest
	(*ListProcessorsResponse)(nil),                                  // 3: yamcs.protobuf.processing.ListProcessorsResponse
	(*SubscribeTMStatisticsRequest)(nil),                            // 4: yamcs.protobuf.processing.SubscribeTMStatisticsRequest
	(*SubscribeProcessorsRequest)(nil),                              // 5: yamcs.protobuf.processing.SubscribeProcessorsRequest
	(*SubscribeParametersRequest)(nil),                              // 6: yamcs.protobuf.processing.SubscribeParametersRequest
	(*SubscribeParametersData)(nil),                                 // 7: yamcs.protobuf.processing.SubscribeParametersData
	(*GetProcessorRequest)(nil),                                     // 8: yamcs.protobuf.processing.GetProcessorRequest
	(*DeleteProcessorRequest)(nil),                                  // 9: yamcs.protobuf.processing.DeleteProcessorRequest
	(*CreateProcessorRequest)(nil),                                  // 10: yamcs.protobuf.processing.CreateProcessorRequest
	(*EditProcessorRequest)(nil),                                    // 11: yamcs.protobuf.processing.EditProcessorRequest
	(*GetParameterValueRequest)(nil),                                // 12: yamcs.protobuf.processing.GetParameterValueRequest
	(*SetParameterValueRequest)(nil),                                // 13: yamcs.protobuf.processing.SetParameterValueRequest
	(*BatchGetParameterValuesRequest)(nil),                          // 14: yamcs.protobuf.processing.BatchGetParameterValuesRequest
	(*BatchGetParameterValuesResponse)(nil),                         // 15: yamcs.protobuf.processing.BatchGetParameterValuesResponse
	(*BatchSetParameterValuesRequest)(nil),                          // 16: yamcs.protobuf.processing.BatchSetParameterValuesRequest
	(*GetAlgorithmStatusRequest)(nil),                               // 17: yamcs.protobuf.processing.GetAlgorithmStatusRequest
	(*SubscribeAlgorithmStatusRequest)(nil),                         // 18: yamcs.protobuf.processing.SubscribeAlgorithmStatusRequest
	(*GetAlgorithmTraceRequest)(nil),                                // 19: yamcs.protobuf.processing.GetAlgorithmTraceRequest
	(*EditAlgorithmTraceRequest)(nil),                               // 20: yamcs.protobuf.processing.EditAlgorithmTraceRequest
	(*AlgorithmStatus)(nil),                                         // 21: yamcs.protobuf.processing.AlgorithmStatus
	(*AlgorithmTrace)(nil),                                          // 22: yamcs.protobuf.processing.AlgorithmTrace
	nil,                                                             // 23: yamcs.protobuf.processing.SubscribeParametersData.MappingEntry
	(*BatchSetParameterValuesRequest_SetParameterValueRequest)(nil), // 24: yamcs.protobuf.processing.BatchSetParameterValuesRequest.SetParameterValueRequest
	(*AlgorithmTrace_Run)(nil),                                      // 25: yamcs.protobuf.processing.AlgorithmTrace.Run
	(*AlgorithmTrace_Log)(nil),                                      // 26: yamcs.protobuf.processing.AlgorithmTrace.Log
	(*yamcsManagement.ProcessorInfo)(nil),                           // 27: yamcs.protobuf.yamcsManagement.ProcessorInfo
	(*protobuf.NamedObjectId)(nil),                                  // 28: yamcs.protobuf.NamedObjectId
	(*pvalue.ParameterValue)(nil),                                   // 29: yamcs.protobuf.pvalue.ParameterValue
	(*timestamp.Timestamp)(nil),                                     // 30: google.protobuf.Timestamp
	(*protobuf.Value)(nil),                                          // 31: yamcs.protobuf.Value
	(*empty.Empty)(nil),                                             // 32: google.protobuf.Empty
	(*yamcsManagement.Statistics)(nil),                              // 33: yamcs.protobuf.yamcsManagement.Statistics
}
var file_yamcs_protobuf_processing_processing_proto_depIdxs = []int32{
	27, // 0: yamcs.protobuf.processing.ListProcessorsResponse.processors:type_name -> yamcs.protobuf.yamcsManagement.ProcessorInfo
	28, // 1: yamcs.protobuf.processing.SubscribeParametersRequest.id:type_name -> yamcs.protobuf.NamedObjectId
	0,  // 2: yamcs.protobuf.processing.SubscribeParametersRequest.action:type_name -> yamcs.protobuf.processing.SubscribeParametersRequest.Action
	23, // 3: yamcs.protobuf.processing.SubscribeParametersData.mapping:type_name -> yamcs.protobuf.processing.SubscribeParametersData.MappingEntry
	28, // 4: yamcs.protobuf.processing.SubscribeParametersData.invalid:type_name -> yamcs.protobuf.NamedObjectId
	29, // 5: yamcs.protobuf.processing.SubscribeParametersData.values:type_name -> yamcs.protobuf.pvalue.ParameterValue
	30, // 6: yamcs.protobuf.processing.EditProcessorRequest.seek:type_name -> google.protobuf.Timestamp
	30, // 7: yamcs.protobuf.processing.EditProcessorRequest.start:type_name -> google.protobuf.Timestamp
	30, // 8: yamcs.protobuf.processing.EditProcessorRequest.stop:type_name -> google.protobuf.Timestamp
	31, // 9: yamcs.protobuf.processing.SetParameterValueRequest.value:type_name -> yamcs.protobuf.Value
	30, // 10: yamcs.protobuf.processing.SetParameterValueRequest.generationTime:type_name -> google.protobuf.Timestamp
	28, // 11: yamcs.protobuf.processing.BatchGetParameterValuesRequest.id:type_name -> yamcs.protobuf.NamedObjectId
	29, // 12: yamcs.protobuf.processing.BatchGetParameterValuesResponse.value:type_name -> yamcs.protobuf.pvalue.ParameterValue
	24, // 13: yamcs.protobuf.processing.BatchSetParameterValuesRequest.request:type_name -> yamcs.protobuf.processing.BatchSetParameterValuesRequest.SetParameterValueRequest
	30, // 14: yamcs.protobuf.processing.AlgorithmStatus.lastRun:type_name -> google.protobuf.Timestamp
	30, // 15: yamcs.protobuf.processing.AlgorithmStatus.errorTime:type_name -> google.protobuf.Timestamp
	25, // 16: yamcs.protobuf.processing.AlgorithmTrace.runs:type_name -> yamcs.protobuf.processing.AlgorithmTrace.Run
	26, // 17: yamcs.protobuf.processing.AlgorithmTrace.logs:type_name -> yamcs.protobuf.processing.AlgorithmTrace.Log
	28, // 18: yamcs.protobuf.processing.SubscribeParametersData.MappingEntry.value:type_name -> yamcs.protobuf.NamedObjectId
	28, // 19: yamcs.protobuf.processing.BatchSetParameterValuesRequest.SetParameterValueRequest.id:type_name -> yamcs.protobuf.NamedObjectId
	31, // 20: yamcs.protobuf.processing.BatchSetParameterValuesRequest.SetParameterValueRequest.value:type_name -> yamcs.protobuf.Value
	30, // 21: yamcs.protobuf.processing.BatchSetParameterValuesRequest.SetParameterValueRequest.generationTime:type_name -> google.protobuf.Timestamp
	30, // 22: yamcs.protobuf.processing.AlgorithmTrace.Run.time:type_name -> google.protobuf.Timestamp
	29, // 23: yamcs.protobuf.processing.AlgorithmTrace.Run.inputs:type_name -> yamcs.protobuf.pvalue.ParameterValue
	29, // 24: yamcs.protobuf.processing.AlgorithmTrace.Run.outputs:type_name -> yamcs.protobuf.pvalue.ParameterValue
	30, // 25: yamcs.protobuf.processing.AlgorithmTrace.Log.time:type_name -> google.protobuf.Timestamp
	32, // 26: yamcs.protobuf.processing.ProcessingApi.ListProcessorTypes:input_type -> google.protobuf.Empty
	2,  // 27: yamcs.protobuf.processing.ProcessingApi.ListProcessors:input_type -> yamcs.protobuf.processing.ListProcessorsRequest
	8,  // 28: yamcs.protobuf.processing.ProcessingApi.GetProcessor:input_type -> yamcs.protobuf.processing.GetProcessorRequest
	9,  // 29: yamcs.protobuf.processing.ProcessingApi.DeleteProcessor:input_type -> yamcs.protobuf.processing.DeleteProcessorRequest
	11, // 30: yamcs.protobuf.processing.ProcessingApi.EditProcessor:input_type -> yamcs.protobuf.processing.EditProcessorRequest
	10, // 31: yamcs.protobuf.processing.ProcessingApi.CreateProcessor:input_type -> yamcs.protobuf.processing.CreateProcessorRequest
	12, // 32: yamcs.protobuf.processing.ProcessingApi.GetParameterValue:input_type -> yamcs.protobuf.processing.GetParameterValueRequest
	13, // 33: yamcs.protobuf.processing.ProcessingApi.SetParameterValue:input_type -> yamcs.protobuf.processing.SetParameterValueRequest
	14, // 34: yamcs.protobuf.processing.ProcessingApi.BatchGetParameterValues:input_type -> yamcs.protobuf.processing.BatchGetParameterValuesRequest
	16, // 35: yamcs.protobuf.processing.ProcessingApi.BatchSetParameterValues:input_type -> yamcs.protobuf.processing.BatchSetParameterValuesRequest
	4,  // 36: yamcs.protobuf.processing.ProcessingApi.SubscribeTMStatistics:input_type -> yamcs.protobuf.processing.SubscribeTMStatisticsRequest
	6,  // 37: yamcs.protobuf.processing.ProcessingApi.SubscribeParameters:input_type -> yamcs.protobuf.processing.SubscribeParametersRequest
	5,  // 38: yamcs.protobuf.processing.ProcessingApi.SubscribeProcessors:input_type -> yamcs.protobuf.processing.SubscribeProcessorsRequest
	17, // 39: yamcs.protobuf.processing.ProcessingApi.GetAlgorithmStatus:input_type -> yamcs.protobuf.processing.GetAlgorithmStatusRequest
	18, // 40: yamcs.protobuf.processing.ProcessingApi.SubscribeAlgorithmStatus:input_type -> yamcs.protobuf.processing.SubscribeAlgorithmStatusRequest
	19, // 41: yamcs.protobuf.processing.ProcessingApi.GetAlgorithmTrace:input_type -> yamcs.protobuf.processing.GetAlgorithmTraceRequest
	20, // 42: yamcs.protobuf.processing.ProcessingApi.EditAlgorithmTrace:input_type -> yamcs.protobuf.processing.EditAlgorithmTraceRequest
	1,  // 43: yamcs.protobuf.processing.ProcessingApi.ListProcessorTypes:output_type -> yamcs.protobuf.processing.ListProcessorTypesResponse
	3,  // 44: yamcs.protobuf.processing.ProcessingApi.ListProcessors:output_type -> yamcs.protobuf.processing.ListProcessorsResponse
	27, // 45: yamcs.protobuf.processing.ProcessingApi.GetProcessor:output_type -> yamcs.protobuf.yamcsManagement.ProcessorInfo
	32, // 46: yamcs.protobuf.processing.ProcessingApi.DeleteProcessor:output_type -> google.protobuf.Empty
	32, // 47: yamcs.protobuf.processing.ProcessingApi.EditProcessor:output_type -> google.protobuf.Empty
	32, // 48: yamcs.protobuf.processing.ProcessingApi.CreateProcessor:output_type -> google.protobuf.Empty
	29, // 49: yamcs.protobuf.processing.ProcessingApi.GetParameterValue:output_type -> yamcs.protobuf.pvalue.ParameterValue
	32, // 50: yamcs.protobuf.processing.ProcessingApi.SetParameterValue:output_type -> google.protobuf.Empty
	15, // 51: yamcs.protobuf.processing.ProcessingApi.BatchGetParameterValues:output_type -> yamcs.protobuf.processing.BatchGetParameterValuesResponse
	32, // 52: yamcs.protobuf.processing.ProcessingApi.BatchSetParameterValues:output_type -> google.protobuf.Empty
	33, // 53: yamcs.protobuf.processing.ProcessingApi.SubscribeTMStatistics:output_type -> yamcs.protobuf.yamcsManagement.Statistics
	7,  // 54: yamcs.protobuf.processing.ProcessingApi.SubscribeParameters:output_type -> yamcs.protobuf.processing.SubscribeParametersData
	27, // 55: yamcs.protobuf.processing.ProcessingApi.SubscribeProcessors:output_type -> yamcs.protobuf.yamcsManagement.ProcessorInfo
	21, // 56: yamcs.protobuf.processing.ProcessingApi.GetAlgorithmStatus:output_type -> yamcs.protobuf.processing.AlgorithmStatus
	21, // 57: yamcs.protobuf.processing.ProcessingApi.SubscribeAlgorithmStatus:output_type -> yamcs.protobuf.processing.AlgorithmStatus
	22, // 58: yamcs.protobuf.processing.ProcessingApi.GetAlgorithmTrace:output_type -> yamcs.protobuf.processing.AlgorithmTrace
	32, // 59: yamcs.protobuf.processing.ProcessingApi.EditAlgorithmTrace:output_type -> google.protobuf.Empty
	43, // [43:60] is the sub-list for method output_type
	26, // [26:43] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_processing_processing_proto_init() }
func file_yamcs_protobuf_processing_processing_proto_init() {
	if File_yamcs_protobuf_processing_processing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yamcs_protobuf_processing_processing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessorTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTMStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeProcessorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeParametersData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParameterValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetParameterValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetParameterValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetParameterValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetParameterValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlgorithmStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeAlgorithmStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlgorithmTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAlgorithmTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetParameterValuesRequest_SetParameterValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmTrace_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yamcs_protobuf_processing_processing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmTrace_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yamcs_protobuf_processing_processing_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_processing_processing_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_processing_processing_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_processing_processing_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_processing_processing_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_processing_processing_proto = out.File
	file_yamcs_protobuf_processing_processing_proto_rawDesc = nil
	file_yamcs_protobuf_processing_processing_proto_goTypes = nil
	file_yamcs_protobuf_processing_processing_proto_depIdxs = nil
}
